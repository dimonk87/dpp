{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2017-12-07T11:19:13.711Z",
    "end": "2017-12-07T11:19:48.068Z",
    "duration": 34357,
    "testsRegistered": 15,
    "passPercent": 26.7,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 11,
    "hasSkipped": true,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Test login",
        "suites": [],
        "tests": [
          {
            "title": "test visible @login",
            "fullTitle": "Test login: test visible @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0ce82689-cae8-4ae8-bda1-d499b3612963",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login positive @login",
            "fullTitle": "Test login: login positive @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6a282452-0857-4845-9141-09c39bc54157",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with empty fields @login",
            "fullTitle": "Test login: login with empty fields @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "512a793e-5fd1-4774-a0d4-2f8433e0bb67",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with incorrect data @login",
            "fullTitle": "Test login: login with incorrect data @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "de0c0079-18e6-44c7-9718-b693e24667ed",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\login_test.js",
        "uuid": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Test login: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "5dfe6f61-2a1f-431c-b0c5-9270c3305857",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Test login: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "75fd46b4-3415-46f1-8db7-73975a2c9bbd",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Test login: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "199144e8-6bef-4657-83a4-8cdbac0c1528",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Test login: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "fce9b76d-5fa8-4c25-b875-a4aa00879c4d",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Test login: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "1112e8c4-5460-44ea-9c5b-15742d5629b0",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\login_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "test visible @login",
            "fullTitle": "Test login: test visible @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0ce82689-cae8-4ae8-bda1-d499b3612963",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login positive @login",
            "fullTitle": "Test login: login positive @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6a282452-0857-4845-9141-09c39bc54157",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with empty fields @login",
            "fullTitle": "Test login: login with empty fields @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "512a793e-5fd1-4774-a0d4-2f8433e0bb67",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with incorrect data @login",
            "fullTitle": "Test login: login with incorrect data @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "de0c0079-18e6-44c7-9718-b693e24667ed",
            "parentUUID": "0630e935-1b49-40b8-aaf1-cd25715d8d07",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Partners",
        "suites": [],
        "tests": [
          {
            "title": "As admin I should be able to create new partner @partners",
            "fullTitle": "Partners: As admin I should be able to create new partner @partners",
            "timedOut": false,
            "duration": 6255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.refresh();\nI.click('[href=\"/partners\"]');\npartnersPage.createNewPartner(partnerName, partnerEmail, partnerCompany, partnerPhone, note, operationNumber, institutionIdentifier);\nI.waitForText(partnerName, 5);\nI.see(partnerName);\nI.sendGetRequest('/api/partners?page=1').then(function (resp) {\n    const partnersList = resp.body.data;\n    const lastPartnerId = partnersList[partnersList.length-1].id;\n    I.sendDeleteRequest('/api/partners/' + lastPartnerId);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "45e67a31-9f5c-4077-8401-02625b2d1d06",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "As admin I should be able to edit created partner @partners",
            "fullTitle": "Partners: As admin I should be able to edit created partner @partners",
            "timedOut": false,
            "duration": 178,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": partnerName,\n    \"email\": partnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": partnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(partnerName);\n    partnersPage.editCreatedPartner(editPartnerName, editPartnerEmail, editPartnerPhone);\n    I.waitForText(editPartnerName, 5);\n    I.see(editPartnerName);\n    I.see(editPartnerEmail);\n    I.see(editPartnerPhone);\n    I.sendDeleteRequest('/api/partners/' + partnerId);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "291524cf-b9af-4807-b31b-da5ded0a4fe4",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "As admin I should be able to copy edited partner @partners",
            "fullTitle": "Partners: As admin I should be able to copy edited partner @partners",
            "timedOut": false,
            "duration": 200,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": editPartnerName,\n    \"email\": editPartnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": editPartnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(editPartnerName);\n    partnersPage.copyEditedPartner();\n    I.waitForElement('[name=form]');\n    I.sendDeleteRequest('/api/partners/' + partnerId);\n    I.sendGetRequest('/api/partners?page=1').then(function (resp) {\n        const partnersList = resp.body.data;\n        const lastPartnerId = partnersList[partnersList.length-1].id;\n        I.sendDeleteRequest('/api/partners/' + lastPartnerId);\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6ae955bc-6646-4796-b880-75235cb3386b",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "As admin I should be able to delete created partner @partners",
            "fullTitle": "Partners: As admin I should be able to delete created partner @partners",
            "timedOut": false,
            "duration": 189,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": partnerName,\n    \"email\": partnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": partnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(partnerName);\n    partnersPage.deleteCreatedPartner();\n    I.wait(1);\n    I.dontSee(partnerName);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9e8b7953-6af7-4faf-9d42-bdfbc3a89fd2",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\partners_test.js",
        "uuid": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Partners: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 10,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "0ba4f16a-1e3c-46db-a570-f285f3413f1d",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before all\" hook: BeforeSuite",
            "fullTitle": "Partners: \"before all\" hook: BeforeSuite",
            "timedOut": false,
            "duration": 5739,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "I.resizeWindow('maximize');\nI.amOnPage('/');\nI.sendPostRequest('/api/auth/login',\n    {\"email\": \"admin@admin.com\", \"password\": \"qweqwe\"},\n    {headers: {'Accept': 'application/json', 'Content-Type': 'application/json'}}).then(function(resp) {\n    token = resp.body.access_token;\n    I.executeScript(`localStorage.setItem('access_token', '${token}')`);\n    I.executeScript(`localStorage.setItem('user', '{\"data\":{\"id\":1,\"name\":\"admin\",\"email\":\"admin@admin.com\",\"phone\":null,\"isBlocked\":false,\"role\":{\"data\":{\"id\":1,\"name\":\"admin\"}}}}')`);\n    I.haveRequestHeaders({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "65217dc6-16f8-4c77-ac8a-632a2d6b4c1d",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Partners: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 190,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "1a937b47-e4a8-4330-8634-345cab175b65",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Partners: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "I.executeScript(`localStorage.setItem('access_token', '${token}')`);\nI.executeScript(`localStorage.setItem('user', '{\"data\":{\"id\":1,\"name\":\"admin\",\"email\":\"admin@admin.com\",\"phone\":null,\"isBlocked\":false,\"role\":{\"data\":{\"id\":1,\"name\":\"admin\"}}}}')`);\npartnerName = \"user\" + Math.floor(Math.random()*100);\npartnerEmail = \"mail\" + Math.floor(Math.random()*100) + \"@mail.com\";;\npartnerCompany = \"LTD\" + Math.floor(Math.random()*100);\npartnerPhone = Math.floor(Math.random()*1000);\nnote = \"This information about \" + partnerName + \" is very impotent\";\noperationNumber =  Math.floor(Math.random()*1000);\ninstitutionIdentifier = Math.floor(Math.random()*1000);\neditPartnerName = \"Change \" + partnerName;\neditPartnerEmail = \"new_\" + partnerEmail;\neditPartnerPhone = Math.floor(Math.random()*100000);",
            "err": {},
            "isRoot": false,
            "uuid": "d218219d-5a6c-48db-ace2-1f07fea4e7cf",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Partners: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "6c932568-bbcd-4b15-817a-56db4c22397b",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Partners: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 13690,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "7076db70-8c30-4369-a389-186bcd2810f9",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\partners_test.js",
        "passes": [
          {
            "title": "As admin I should be able to create new partner @partners",
            "fullTitle": "Partners: As admin I should be able to create new partner @partners",
            "timedOut": false,
            "duration": 6255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.refresh();\nI.click('[href=\"/partners\"]');\npartnersPage.createNewPartner(partnerName, partnerEmail, partnerCompany, partnerPhone, note, operationNumber, institutionIdentifier);\nI.waitForText(partnerName, 5);\nI.see(partnerName);\nI.sendGetRequest('/api/partners?page=1').then(function (resp) {\n    const partnersList = resp.body.data;\n    const lastPartnerId = partnersList[partnersList.length-1].id;\n    I.sendDeleteRequest('/api/partners/' + lastPartnerId);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "45e67a31-9f5c-4077-8401-02625b2d1d06",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "As admin I should be able to edit created partner @partners",
            "fullTitle": "Partners: As admin I should be able to edit created partner @partners",
            "timedOut": false,
            "duration": 178,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": partnerName,\n    \"email\": partnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": partnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(partnerName);\n    partnersPage.editCreatedPartner(editPartnerName, editPartnerEmail, editPartnerPhone);\n    I.waitForText(editPartnerName, 5);\n    I.see(editPartnerName);\n    I.see(editPartnerEmail);\n    I.see(editPartnerPhone);\n    I.sendDeleteRequest('/api/partners/' + partnerId);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "291524cf-b9af-4807-b31b-da5ded0a4fe4",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "As admin I should be able to copy edited partner @partners",
            "fullTitle": "Partners: As admin I should be able to copy edited partner @partners",
            "timedOut": false,
            "duration": 200,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": editPartnerName,\n    \"email\": editPartnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": editPartnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(editPartnerName);\n    partnersPage.copyEditedPartner();\n    I.waitForElement('[name=form]');\n    I.sendDeleteRequest('/api/partners/' + partnerId);\n    I.sendGetRequest('/api/partners?page=1').then(function (resp) {\n        const partnersList = resp.body.data;\n        const lastPartnerId = partnersList[partnersList.length-1].id;\n        I.sendDeleteRequest('/api/partners/' + lastPartnerId);\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6ae955bc-6646-4796-b880-75235cb3386b",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "As admin I should be able to delete created partner @partners",
            "fullTitle": "Partners: As admin I should be able to delete created partner @partners",
            "timedOut": false,
            "duration": 189,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": partnerName,\n    \"email\": partnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": partnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(partnerName);\n    partnersPage.deleteCreatedPartner();\n    I.wait(1);\n    I.dontSee(partnerName);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9e8b7953-6af7-4faf-9d42-bdfbc3a89fd2",
            "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 6822,
        "rootEmpty": false
      },
      {
        "title": "Processing points",
        "suites": [],
        "tests": [
          {
            "title": "As admin I should be able to create new process @process",
            "fullTitle": "Processing points: As admin I should be able to create new process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6a172fdc-1a13-4195-9545-e039a4fc7994",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to edit created process @process",
            "fullTitle": "Processing points: As admin I should be able to edit created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ba7e7f34-7848-4b81-980b-6900d567d288",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to copy created process @process",
            "fullTitle": "Processing points: As admin I should be able to copy created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "48ed7519-77d9-4dbe-bb93-296af9153ed2",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to delete created process @process @deleteProcess",
            "fullTitle": "Processing points: As admin I should be able to delete created process @process @deleteProcess",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "896742c2-2b1b-4d52-9bc6-c557e416b31e",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\processing_points_test.js",
        "uuid": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Processing points: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "173e30d3-fde4-4eb6-b6df-94668ce2c6f2",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Processing points: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "2eb6228a-755f-4ce2-b8e8-add723fd62d8",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Processing points: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "90bfecbd-a75e-4056-8678-0fcd539d6b85",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Processing points: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "2fd3eb39-7105-4ed5-88c6-3753855e99cf",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Processing points: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "5526c081-699e-483f-bf94-239bdc01499f",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\processing_points_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "As admin I should be able to create new process @process",
            "fullTitle": "Processing points: As admin I should be able to create new process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6a172fdc-1a13-4195-9545-e039a4fc7994",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to edit created process @process",
            "fullTitle": "Processing points: As admin I should be able to edit created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ba7e7f34-7848-4b81-980b-6900d567d288",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to copy created process @process",
            "fullTitle": "Processing points: As admin I should be able to copy created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "48ed7519-77d9-4dbe-bb93-296af9153ed2",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to delete created process @process @deleteProcess",
            "fullTitle": "Processing points: As admin I should be able to delete created process @process @deleteProcess",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "896742c2-2b1b-4d52-9bc6-c557e416b31e",
            "parentUUID": "a886800c-ef2f-47d4-9e7f-a74ac335a893",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Users",
        "suites": [],
        "tests": [
          {
            "title": "create user @users",
            "fullTitle": "Users: create user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "710712df-2f11-45e4-a06a-89a371f6e262",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created user @users",
            "fullTitle": "Users: edit created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b5c6fa8e-f1d6-4e15-8716-3f6c1a1c9fba",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created user @users",
            "fullTitle": "Users: delete created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "7923f4cb-420a-4bb1-af87-d3e5cc020d24",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\users_test.js",
        "uuid": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Users: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "b0c159b1-c8f2-442a-bb63-bbbea7bb7fa6",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before all\" hook: BeforeSuite",
            "fullTitle": "Users: \"before all\" hook: BeforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e7926d0e-1b64-4f03-8195-68f38b083deb",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Users: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "0645ffa8-532e-4b7c-849c-6ac871ab3609",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Users: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "d6244f29-94af-4a27-a539-14c3f211bd05",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Users: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "389803e0-4e03-4dea-89cf-6c80b7937d32",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Users: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "a49e204f-d4db-4338-950b-70a94cbee5a2",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\users_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "create user @users",
            "fullTitle": "Users: create user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "710712df-2f11-45e4-a06a-89a371f6e262",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created user @users",
            "fullTitle": "Users: edit created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b5c6fa8e-f1d6-4e15-8716-3f6c1a1c9fba",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created user @users",
            "fullTitle": "Users: delete created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "7923f4cb-420a-4bb1-af87-d3e5cc020d24",
            "parentUUID": "2df1ef25-139b-4465-a5fa-331ef9f62c4c",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 3,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 0,
    "uuid": "2b4e16f4-436a-4f53-88ce-542641a39c2c",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "As admin I should be able to create new partner @partners",
      "fullTitle": "Partners: As admin I should be able to create new partner @partners",
      "timedOut": false,
      "duration": 6255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.refresh();\nI.click('[href=\"/partners\"]');\npartnersPage.createNewPartner(partnerName, partnerEmail, partnerCompany, partnerPhone, note, operationNumber, institutionIdentifier);\nI.waitForText(partnerName, 5);\nI.see(partnerName);\nI.sendGetRequest('/api/partners?page=1').then(function (resp) {\n    const partnersList = resp.body.data;\n    const lastPartnerId = partnersList[partnersList.length-1].id;\n    I.sendDeleteRequest('/api/partners/' + lastPartnerId);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "45e67a31-9f5c-4077-8401-02625b2d1d06",
      "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "As admin I should be able to edit created partner @partners",
      "fullTitle": "Partners: As admin I should be able to edit created partner @partners",
      "timedOut": false,
      "duration": 178,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": partnerName,\n    \"email\": partnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": partnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(partnerName);\n    partnersPage.editCreatedPartner(editPartnerName, editPartnerEmail, editPartnerPhone);\n    I.waitForText(editPartnerName, 5);\n    I.see(editPartnerName);\n    I.see(editPartnerEmail);\n    I.see(editPartnerPhone);\n    I.sendDeleteRequest('/api/partners/' + partnerId);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "291524cf-b9af-4807-b31b-da5ded0a4fe4",
      "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "As admin I should be able to copy edited partner @partners",
      "fullTitle": "Partners: As admin I should be able to copy edited partner @partners",
      "timedOut": false,
      "duration": 200,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": editPartnerName,\n    \"email\": editPartnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": editPartnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(editPartnerName);\n    partnersPage.copyEditedPartner();\n    I.waitForElement('[name=form]');\n    I.sendDeleteRequest('/api/partners/' + partnerId);\n    I.sendGetRequest('/api/partners?page=1').then(function (resp) {\n        const partnersList = resp.body.data;\n        const lastPartnerId = partnersList[partnersList.length-1].id;\n        I.sendDeleteRequest('/api/partners/' + lastPartnerId);\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6ae955bc-6646-4796-b880-75235cb3386b",
      "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "As admin I should be able to delete created partner @partners",
      "fullTitle": "Partners: As admin I should be able to delete created partner @partners",
      "timedOut": false,
      "duration": 189,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": partnerName,\n    \"email\": partnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": partnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(partnerName);\n    partnersPage.deleteCreatedPartner();\n    I.wait(1);\n    I.dontSee(partnerName);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9e8b7953-6af7-4faf-9d42-bdfbc3a89fd2",
      "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "As admin I should be able to create new partner @partners",
      "fullTitle": "Partners: As admin I should be able to create new partner @partners",
      "timedOut": false,
      "duration": 6255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.refresh();\nI.click('[href=\"/partners\"]');\npartnersPage.createNewPartner(partnerName, partnerEmail, partnerCompany, partnerPhone, note, operationNumber, institutionIdentifier);\nI.waitForText(partnerName, 5);\nI.see(partnerName);\nI.sendGetRequest('/api/partners?page=1').then(function (resp) {\n    const partnersList = resp.body.data;\n    const lastPartnerId = partnersList[partnersList.length-1].id;\n    I.sendDeleteRequest('/api/partners/' + lastPartnerId);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "45e67a31-9f5c-4077-8401-02625b2d1d06",
      "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "As admin I should be able to edit created partner @partners",
      "fullTitle": "Partners: As admin I should be able to edit created partner @partners",
      "timedOut": false,
      "duration": 178,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": partnerName,\n    \"email\": partnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": partnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(partnerName);\n    partnersPage.editCreatedPartner(editPartnerName, editPartnerEmail, editPartnerPhone);\n    I.waitForText(editPartnerName, 5);\n    I.see(editPartnerName);\n    I.see(editPartnerEmail);\n    I.see(editPartnerPhone);\n    I.sendDeleteRequest('/api/partners/' + partnerId);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "291524cf-b9af-4807-b31b-da5ded0a4fe4",
      "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "As admin I should be able to copy edited partner @partners",
      "fullTitle": "Partners: As admin I should be able to copy edited partner @partners",
      "timedOut": false,
      "duration": 200,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": editPartnerName,\n    \"email\": editPartnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": editPartnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(editPartnerName);\n    partnersPage.copyEditedPartner();\n    I.waitForElement('[name=form]');\n    I.sendDeleteRequest('/api/partners/' + partnerId);\n    I.sendGetRequest('/api/partners?page=1').then(function (resp) {\n        const partnersList = resp.body.data;\n        const lastPartnerId = partnersList[partnersList.length-1].id;\n        I.sendDeleteRequest('/api/partners/' + lastPartnerId);\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6ae955bc-6646-4796-b880-75235cb3386b",
      "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "As admin I should be able to delete created partner @partners",
      "fullTitle": "Partners: As admin I should be able to delete created partner @partners",
      "timedOut": false,
      "duration": 189,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/partners', JSON.stringify({\n    \"name\": partnerName,\n    \"email\": partnerEmail,\n    \"company\": partnerCompany,\n    \"phone\": partnerPhone,\n    \"note\": note,\n    \"bn\": operationNumber,\n    \"ik\": institutionIdentifier\n})).then(function(resp) {\n    partnerId = resp.body.data.id;\n    I.refresh();\n    I.waitForElement('[href=\"/partners\"]');\n    I.click('[href=\"/partners\"]');\n    I.waitForText(partnerName);\n    partnersPage.deleteCreatedPartner();\n    I.wait(1);\n    I.dontSee(partnerName);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9e8b7953-6af7-4faf-9d42-bdfbc3a89fd2",
      "parentUUID": "cae1d313-0c5e-437a-a55c-4e5a31a1491c",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}