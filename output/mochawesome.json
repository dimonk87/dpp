{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2017-12-06T11:49:57.650Z",
    "end": "2017-12-06T11:50:09.866Z",
    "duration": 12216,
    "testsRegistered": 15,
    "passPercent": 20,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 12,
    "hasSkipped": true,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Test login",
        "suites": [],
        "tests": [
          {
            "title": "test visible @login",
            "fullTitle": "Test login: test visible @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e76bedf6-9941-48e9-9aaa-c989598ecd09",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login positive @login",
            "fullTitle": "Test login: login positive @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "3e7a033b-ea1a-455c-9059-0d42e2df4efe",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with empty fields @login",
            "fullTitle": "Test login: login with empty fields @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "98500615-85d5-4424-99ab-47f41cc3d910",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with incorrect data @login",
            "fullTitle": "Test login: login with incorrect data @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e75e498e-05c1-41d0-8044-067268378df8",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\login_test.js",
        "uuid": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Test login: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "ae740cd9-f580-435f-83b8-fe9b3b72ded9",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Test login: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "f49d5de3-0a6a-4388-9e90-768df7e0bde4",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Test login: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "09742da6-fa68-462f-8638-4159c37aca98",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Test login: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "5e5a453d-aa36-40c6-b8f5-61f25131bdc5",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Test login: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "f4ebdcdc-9b64-42d1-924a-bbe3b507fc5c",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\login_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "test visible @login",
            "fullTitle": "Test login: test visible @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e76bedf6-9941-48e9-9aaa-c989598ecd09",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login positive @login",
            "fullTitle": "Test login: login positive @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "3e7a033b-ea1a-455c-9059-0d42e2df4efe",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with empty fields @login",
            "fullTitle": "Test login: login with empty fields @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "98500615-85d5-4424-99ab-47f41cc3d910",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with incorrect data @login",
            "fullTitle": "Test login: login with incorrect data @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e75e498e-05c1-41d0-8044-067268378df8",
            "parentUUID": "64ecb15d-a7aa-463b-8f2d-c7bf21df5417",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Partners",
        "suites": [],
        "tests": [
          {
            "title": "create partner @partners",
            "fullTitle": "Partners: create partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "224d524d-b375-4f87-8f44-35f99e2c194b",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created partner @partners",
            "fullTitle": "Partners: edit created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ebb10b56-6bc3-4574-85d5-7cfa4de979a1",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "copy edited partner @partners",
            "fullTitle": "Partners: copy edited partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "df5ed179-4c2b-4be9-9cda-4d66e430002e",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created partner @partners",
            "fullTitle": "Partners: delete created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "7399a501-1478-414d-bb4b-aaa47405dfc6",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\partners_test.js",
        "uuid": "24520466-1eb4-49b4-a70f-20f2886cdeae",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Partners: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "cdfca4d1-7dd3-4072-872b-8e1b031d2e27",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Partners: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "cda8bbe1-6584-4db6-b699-1a46604a4cf3",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Partners: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6a620298-0291-4879-b9a4-f0cbae1d63c8",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Partners: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "b371db45-cef8-4fa1-b9dd-d8f85085b094",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Partners: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "5625f2bb-1ed6-45f5-90f1-5dc7f05fa592",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\partners_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "create partner @partners",
            "fullTitle": "Partners: create partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "224d524d-b375-4f87-8f44-35f99e2c194b",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created partner @partners",
            "fullTitle": "Partners: edit created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ebb10b56-6bc3-4574-85d5-7cfa4de979a1",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "copy edited partner @partners",
            "fullTitle": "Partners: copy edited partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "df5ed179-4c2b-4be9-9cda-4d66e430002e",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created partner @partners",
            "fullTitle": "Partners: delete created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "7399a501-1478-414d-bb4b-aaa47405dfc6",
            "parentUUID": "24520466-1eb4-49b4-a70f-20f2886cdeae",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Processing points",
        "suites": [],
        "tests": [
          {
            "title": "As admin I should be able to create new process @process",
            "fullTitle": "Processing points: As admin I should be able to create new process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "7321c181-e631-4b95-a95c-8c535ac7daae",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to edit created process @process",
            "fullTitle": "Processing points: As admin I should be able to edit created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "f4ab9f5a-899a-415b-81f9-9dda9032da47",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to copy created process @process",
            "fullTitle": "Processing points: As admin I should be able to copy created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "266c2c76-3fd7-4245-9466-3e51fd8e4117",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to delete created process @process @deleteProcess",
            "fullTitle": "Processing points: As admin I should be able to delete created process @process @deleteProcess",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "06b29005-0de2-4e74-ab48-0d2f8e203d68",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\processing_points_test.js",
        "uuid": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Processing points: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "b22af704-6630-4b1d-9051-e07fa8558ac9",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Processing points: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "4dfc4cb3-8924-482b-8776-a9d3abad526d",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Processing points: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "3dbb222f-a239-4de7-a16d-30d55bcdcc18",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Processing points: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "6f6e1ffc-a873-4376-b15b-19ab28b96c81",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Processing points: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "efd706e8-a04b-42e6-8edc-faa6994b70d7",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\processing_points_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "As admin I should be able to create new process @process",
            "fullTitle": "Processing points: As admin I should be able to create new process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "7321c181-e631-4b95-a95c-8c535ac7daae",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to edit created process @process",
            "fullTitle": "Processing points: As admin I should be able to edit created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "f4ab9f5a-899a-415b-81f9-9dda9032da47",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to copy created process @process",
            "fullTitle": "Processing points: As admin I should be able to copy created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "266c2c76-3fd7-4245-9466-3e51fd8e4117",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to delete created process @process @deleteProcess",
            "fullTitle": "Processing points: As admin I should be able to delete created process @process @deleteProcess",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "06b29005-0de2-4e74-ab48-0d2f8e203d68",
            "parentUUID": "9cfd5ede-1994-4c2b-a48a-4599689abb50",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Users",
        "suites": [],
        "tests": [
          {
            "title": "create user @users",
            "fullTitle": "Users: create user @users",
            "timedOut": false,
            "duration": 4637,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.refresh();\nusersPage.createNewUser(userName, userEmail, userPassword, userPhone);\nI.waitForText(userName, 5);\nI.see(userName);\nI.sendGetRequest('/api/users').then(function(resp) {\n    const usersList = resp.body.data;\n    const lastUserId = usersList[usersList.length-1].id;\n    console.log(lastUserId);\n    I.sendDeleteRequest('/api/users/' + lastUserId);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2895d538-70e5-4d6a-8b9b-4401e63311ae",
            "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "edit created user @users",
            "fullTitle": "Users: edit created user @users",
            "timedOut": false,
            "duration": 199,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.editCreatedUser(editUserName);\n        I.waitForText(editUserName, 5);\n        I.see(editUserName);\n        I.sendDeleteRequest('/api/users/' + userId);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a4369169-c416-4fff-8e81-19aeebfa1c1a",
            "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete created user @users",
            "fullTitle": "Users: delete created user @users",
            "timedOut": false,
            "duration": 164,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.deleteCreatedUser();\n        I.wait(1);\n        I.dontSee(userName);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "88db059e-c675-43d9-ac8b-d135361efa61",
            "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\users_test.js",
        "uuid": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Users: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "67be926a-fc51-480a-8d60-84c44fcbd5db",
            "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Users: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "d4cbcae9-4805-40b1-8ed3-a00bc910ccd9",
            "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Users: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 890,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "I.resizeWindow('maximize');\nI.amOnPage('/');\nI.sendPostRequest('/api/auth/login',\n    {\"email\": \"admin@admin.com\", \"password\": \"qweqwe\"},\n    {headers: {'Accept': 'application/json', 'Content-Type': 'application/json'}}).then(function(resp) {\n    token = resp.body.access_token;\n    I.executeScript(`localStorage.setItem('access_token', '${token}')`);\n    I.executeScript(`localStorage.setItem('user', '{\"data\":{\"id\":1,\"name\":\"admin\",\"email\":\"admin@admin.com\",\"phone\":null,\"isBlocked\":false,\"role\":{\"data\":{\"id\":1,\"name\":\"admin\"}}}}')`);\n    //I.refresh();\n    I.haveRequestHeaders({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n    });\n});\nuserName = \"user\" + Math.floor(Math.random()*1000);\nuserEmail = \"mail\" + Math.floor(Math.random()*1000) + \"@mail.com\";\nuserPassword = \"password\" + Math.floor(Math.random()*100);\nuserPhone = Math.floor(Math.random()*1000) + \"-\" + Math.floor(Math.random()*1000);\neditUserName = \"Change \" + userName;",
            "err": {},
            "isRoot": false,
            "uuid": "f62eedb9-f6c5-4fea-84f6-62053e0466c3",
            "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Users: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "3bc4b832-54e8-41f8-8ef4-ba7594bd7d36",
            "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Users: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 43,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "e6831fa2-7781-4298-88a2-0e2684af756e",
            "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\users_test.js",
        "passes": [
          {
            "title": "create user @users",
            "fullTitle": "Users: create user @users",
            "timedOut": false,
            "duration": 4637,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.refresh();\nusersPage.createNewUser(userName, userEmail, userPassword, userPhone);\nI.waitForText(userName, 5);\nI.see(userName);\nI.sendGetRequest('/api/users').then(function(resp) {\n    const usersList = resp.body.data;\n    const lastUserId = usersList[usersList.length-1].id;\n    console.log(lastUserId);\n    I.sendDeleteRequest('/api/users/' + lastUserId);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2895d538-70e5-4d6a-8b9b-4401e63311ae",
            "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "edit created user @users",
            "fullTitle": "Users: edit created user @users",
            "timedOut": false,
            "duration": 199,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.editCreatedUser(editUserName);\n        I.waitForText(editUserName, 5);\n        I.see(editUserName);\n        I.sendDeleteRequest('/api/users/' + userId);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a4369169-c416-4fff-8e81-19aeebfa1c1a",
            "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete created user @users",
            "fullTitle": "Users: delete created user @users",
            "timedOut": false,
            "duration": 164,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.deleteCreatedUser();\n        I.wait(1);\n        I.dontSee(userName);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "88db059e-c675-43d9-ac8b-d135361efa61",
            "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5000,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 0,
    "uuid": "bc8e4d86-77e8-46b5-a3d8-774058d4a3db",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "create user @users",
      "fullTitle": "Users: create user @users",
      "timedOut": false,
      "duration": 4637,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.refresh();\nusersPage.createNewUser(userName, userEmail, userPassword, userPhone);\nI.waitForText(userName, 5);\nI.see(userName);\nI.sendGetRequest('/api/users').then(function(resp) {\n    const usersList = resp.body.data;\n    const lastUserId = usersList[usersList.length-1].id;\n    console.log(lastUserId);\n    I.sendDeleteRequest('/api/users/' + lastUserId);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2895d538-70e5-4d6a-8b9b-4401e63311ae",
      "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "edit created user @users",
      "fullTitle": "Users: edit created user @users",
      "timedOut": false,
      "duration": 199,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.editCreatedUser(editUserName);\n        I.waitForText(editUserName, 5);\n        I.see(editUserName);\n        I.sendDeleteRequest('/api/users/' + userId);\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a4369169-c416-4fff-8e81-19aeebfa1c1a",
      "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete created user @users",
      "fullTitle": "Users: delete created user @users",
      "timedOut": false,
      "duration": 164,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.deleteCreatedUser();\n        I.wait(1);\n        I.dontSee(userName);\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "88db059e-c675-43d9-ac8b-d135361efa61",
      "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "create user @users",
      "fullTitle": "Users: create user @users",
      "timedOut": false,
      "duration": 4637,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.refresh();\nusersPage.createNewUser(userName, userEmail, userPassword, userPhone);\nI.waitForText(userName, 5);\nI.see(userName);\nI.sendGetRequest('/api/users').then(function(resp) {\n    const usersList = resp.body.data;\n    const lastUserId = usersList[usersList.length-1].id;\n    console.log(lastUserId);\n    I.sendDeleteRequest('/api/users/' + lastUserId);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2895d538-70e5-4d6a-8b9b-4401e63311ae",
      "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "edit created user @users",
      "fullTitle": "Users: edit created user @users",
      "timedOut": false,
      "duration": 199,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.editCreatedUser(editUserName);\n        I.waitForText(editUserName, 5);\n        I.see(editUserName);\n        I.sendDeleteRequest('/api/users/' + userId);\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "a4369169-c416-4fff-8e81-19aeebfa1c1a",
      "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete created user @users",
      "fullTitle": "Users: delete created user @users",
      "timedOut": false,
      "duration": 164,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.deleteCreatedUser();\n        I.wait(1);\n        I.dontSee(userName);\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "88db059e-c675-43d9-ac8b-d135361efa61",
      "parentUUID": "4bc1a357-9a74-4b76-92d3-b5b4c83c2a3e",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}