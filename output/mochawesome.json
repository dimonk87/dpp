{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2017-12-06T10:22:00.600Z",
    "end": "2017-12-06T10:22:12.634Z",
    "duration": 12034,
    "testsRegistered": 15,
    "passPercent": 20,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 12,
    "hasSkipped": true,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Test login",
        "suites": [],
        "tests": [
          {
            "title": "test visible @login",
            "fullTitle": "Test login: test visible @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5239a680-c7f1-4181-9f73-a9f1d406c1c5",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login positive @login",
            "fullTitle": "Test login: login positive @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "a4beb684-1d4c-47f3-84ed-e5e4cc5c708a",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with empty fields @login",
            "fullTitle": "Test login: login with empty fields @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0a30272f-bf5b-4262-a5da-77b686fddb26",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with incorrect data @login",
            "fullTitle": "Test login: login with incorrect data @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fabf5f66-e614-4237-9fba-c9c7ad04b1f2",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\login_test.js",
        "uuid": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Test login: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "00541bc7-b0e3-46b1-a6e2-3fa018f4e460",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Test login: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "d4cf2db4-84dc-4327-a393-72c759ac987f",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Test login: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "609c0018-54d2-4428-a3c7-eca44e7a7fab",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Test login: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "c54eb1a8-49eb-4521-a00f-2b3f29f2a712",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Test login: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "99790504-3dad-4913-ad06-dfeb332d36d5",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\login_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "test visible @login",
            "fullTitle": "Test login: test visible @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5239a680-c7f1-4181-9f73-a9f1d406c1c5",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login positive @login",
            "fullTitle": "Test login: login positive @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "a4beb684-1d4c-47f3-84ed-e5e4cc5c708a",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with empty fields @login",
            "fullTitle": "Test login: login with empty fields @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0a30272f-bf5b-4262-a5da-77b686fddb26",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with incorrect data @login",
            "fullTitle": "Test login: login with incorrect data @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fabf5f66-e614-4237-9fba-c9c7ad04b1f2",
            "parentUUID": "8cd0f38a-e8ea-4284-8099-f68beca0719e",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Partners",
        "suites": [],
        "tests": [
          {
            "title": "create partner @partners",
            "fullTitle": "Partners: create partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "916cdd50-548f-4a58-bb15-cfbccc207e8a",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created partner @partners",
            "fullTitle": "Partners: edit created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "f58f7d51-93bc-412a-9f9d-25bbca181b98",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "copy edited partner @partners",
            "fullTitle": "Partners: copy edited partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "bb68018c-7684-4434-b276-dbe2960a3aa8",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created partner @partners",
            "fullTitle": "Partners: delete created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "37791e13-ce18-419f-a46a-68d81434cda6",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\partners_test.js",
        "uuid": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Partners: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "59818c6c-8711-438c-a17c-b206af595363",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Partners: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "8d5c3211-de8c-4987-b37b-155d70ebed05",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Partners: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "9cb901b3-6534-41b1-ac70-91131e2789ed",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Partners: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "bdd6cca0-46e5-48e7-96ea-8e792ddda9b9",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Partners: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "71b97506-d326-4d2d-9215-23148a87ddd7",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\partners_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "create partner @partners",
            "fullTitle": "Partners: create partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "916cdd50-548f-4a58-bb15-cfbccc207e8a",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created partner @partners",
            "fullTitle": "Partners: edit created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "f58f7d51-93bc-412a-9f9d-25bbca181b98",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "copy edited partner @partners",
            "fullTitle": "Partners: copy edited partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "bb68018c-7684-4434-b276-dbe2960a3aa8",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created partner @partners",
            "fullTitle": "Partners: delete created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "37791e13-ce18-419f-a46a-68d81434cda6",
            "parentUUID": "4268eb83-2f9d-4937-93bc-3b2396a99b4b",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Processing points",
        "suites": [],
        "tests": [
          {
            "title": "As admin I should be able to create new process @process",
            "fullTitle": "Processing points: As admin I should be able to create new process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "dba76dcb-f93d-4caa-9f0f-b7863df99103",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to edit created process @process",
            "fullTitle": "Processing points: As admin I should be able to edit created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "2ff8d2c4-e184-4b05-afb3-5a9333843cd3",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to copy created process @process",
            "fullTitle": "Processing points: As admin I should be able to copy created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "746471ce-7be8-4e54-876c-46fb75926870",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to delete created process @process @deleteProcess",
            "fullTitle": "Processing points: As admin I should be able to delete created process @process @deleteProcess",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "355b70dc-a361-41d2-86aa-834f8040605f",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\processing_points_test.js",
        "uuid": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Processing points: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "545ceb2b-49ff-4518-81f1-15476ea31b7e",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Processing points: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "0e12cdb7-409b-4d16-8811-311d8b64301f",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Processing points: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "1369cc93-32e2-449f-9f48-093a21a362e7",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Processing points: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "de339b74-c987-41fd-81ed-28085ff55071",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Processing points: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "1db6d110-b5bd-4534-b7c4-2a3eed07db07",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\processing_points_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "As admin I should be able to create new process @process",
            "fullTitle": "Processing points: As admin I should be able to create new process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "dba76dcb-f93d-4caa-9f0f-b7863df99103",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to edit created process @process",
            "fullTitle": "Processing points: As admin I should be able to edit created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "2ff8d2c4-e184-4b05-afb3-5a9333843cd3",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to copy created process @process",
            "fullTitle": "Processing points: As admin I should be able to copy created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "746471ce-7be8-4e54-876c-46fb75926870",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to delete created process @process @deleteProcess",
            "fullTitle": "Processing points: As admin I should be able to delete created process @process @deleteProcess",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "355b70dc-a361-41d2-86aa-834f8040605f",
            "parentUUID": "c5c6cdbe-3eb1-47a5-98f2-8371a6b8ac06",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Users",
        "suites": [],
        "tests": [
          {
            "title": "create user @users",
            "fullTitle": "Users: create user @users",
            "timedOut": false,
            "duration": 4304,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.refresh();\nusersPage.createNewUser(userName, userEmail, userPassword, userPhone);\nI.waitForText(userName, 5);\nI.see(userName);\nI.sendGetRequest('/api/users').then(function(resp) {\n    const usersList = resp.body.data;\n    const lastUserId = usersList[usersList.length-1].id;\n    console.log(lastUserId);\n    I.sendDeleteRequest('/api/users/' + lastUserId);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "50ca4e70-c520-4fb9-890d-e128d5ced8d2",
            "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "edit created user @users",
            "fullTitle": "Users: edit created user @users",
            "timedOut": false,
            "duration": 300,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.editCreatedUser(editUserName);\n        I.waitForText(editUserName, 5);\n        I.see(editUserName);\n        I.sendDeleteRequest('/api/users/' + userId);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e64e1ec1-3fe7-4871-bff3-d120136ee84d",
            "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete created user @users",
            "fullTitle": "Users: delete created user @users",
            "timedOut": false,
            "duration": 173,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.deleteCreatedUser();\n        I.waitUntil(function () {\n            I.dontSee(userName);\n            }\n        );\n        //I.dontSee(userName);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "849f7f6b-ca7b-454a-aedb-aa44012d9ecb",
            "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\users_test.js",
        "uuid": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Users: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "36aa83f2-0dbe-4410-b565-520c5ef49005",
            "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Users: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "f3fd004d-fe95-4179-97b0-46634c58e512",
            "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Users: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 945,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "I.resizeWindow('maximize');\nI.amOnPage('/');\nI.sendPostRequest('/api/auth/login',\n    {\"email\": \"admin@admin.com\", \"password\": \"qweqwe\"},\n    {headers: {'Accept': 'application/json', 'Content-Type': 'application/json'}}).then(function(resp) {\n    token = resp.body.access_token;\n    I.executeScript(`localStorage.setItem('access_token', '${token}')`);\n    I.executeScript(`localStorage.setItem('user', '{\"data\":{\"id\":1,\"name\":\"admin\",\"email\":\"admin@admin.com\",\"phone\":null,\"isBlocked\":false,\"role\":{\"data\":{\"id\":1,\"name\":\"admin\"}}}}')`);\n    //I.refresh();\n    I.haveRequestHeaders({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n    });\n});\nuserName = \"user\" + Math.floor(Math.random()*1000);\nuserEmail = \"mail\" + Math.floor(Math.random()*1000) + \"@mail.com\";\nuserPassword = \"password\" + Math.floor(Math.random()*100);\nuserPhone = Math.floor(Math.random()*1000) + \"-\" + Math.floor(Math.random()*1000);\neditUserName = \"Change \" + userName;",
            "err": {},
            "isRoot": false,
            "uuid": "e31c778e-020c-4832-89b8-863f3ef2b388",
            "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Users: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "f5288517-e2ff-42c9-9392-8753bd71df6a",
            "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Users: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 37,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "793d2282-74fb-4803-887e-c4f7f413fc97",
            "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\users_test.js",
        "passes": [
          {
            "title": "create user @users",
            "fullTitle": "Users: create user @users",
            "timedOut": false,
            "duration": 4304,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.refresh();\nusersPage.createNewUser(userName, userEmail, userPassword, userPhone);\nI.waitForText(userName, 5);\nI.see(userName);\nI.sendGetRequest('/api/users').then(function(resp) {\n    const usersList = resp.body.data;\n    const lastUserId = usersList[usersList.length-1].id;\n    console.log(lastUserId);\n    I.sendDeleteRequest('/api/users/' + lastUserId);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "50ca4e70-c520-4fb9-890d-e128d5ced8d2",
            "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "edit created user @users",
            "fullTitle": "Users: edit created user @users",
            "timedOut": false,
            "duration": 300,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.editCreatedUser(editUserName);\n        I.waitForText(editUserName, 5);\n        I.see(editUserName);\n        I.sendDeleteRequest('/api/users/' + userId);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e64e1ec1-3fe7-4871-bff3-d120136ee84d",
            "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete created user @users",
            "fullTitle": "Users: delete created user @users",
            "timedOut": false,
            "duration": 173,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.deleteCreatedUser();\n        I.waitUntil(function () {\n            I.dontSee(userName);\n            }\n        );\n        //I.dontSee(userName);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "849f7f6b-ca7b-454a-aedb-aa44012d9ecb",
            "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4777,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 0,
    "uuid": "c992265d-4676-491e-afbb-68f4f43efb4b",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "create user @users",
      "fullTitle": "Users: create user @users",
      "timedOut": false,
      "duration": 4304,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.refresh();\nusersPage.createNewUser(userName, userEmail, userPassword, userPhone);\nI.waitForText(userName, 5);\nI.see(userName);\nI.sendGetRequest('/api/users').then(function(resp) {\n    const usersList = resp.body.data;\n    const lastUserId = usersList[usersList.length-1].id;\n    console.log(lastUserId);\n    I.sendDeleteRequest('/api/users/' + lastUserId);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "50ca4e70-c520-4fb9-890d-e128d5ced8d2",
      "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "edit created user @users",
      "fullTitle": "Users: edit created user @users",
      "timedOut": false,
      "duration": 300,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.editCreatedUser(editUserName);\n        I.waitForText(editUserName, 5);\n        I.see(editUserName);\n        I.sendDeleteRequest('/api/users/' + userId);\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e64e1ec1-3fe7-4871-bff3-d120136ee84d",
      "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete created user @users",
      "fullTitle": "Users: delete created user @users",
      "timedOut": false,
      "duration": 173,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.deleteCreatedUser();\n        I.waitUntil(function () {\n            I.dontSee(userName);\n            }\n        );\n        //I.dontSee(userName);\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "849f7f6b-ca7b-454a-aedb-aa44012d9ecb",
      "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "create user @users",
      "fullTitle": "Users: create user @users",
      "timedOut": false,
      "duration": 4304,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.refresh();\nusersPage.createNewUser(userName, userEmail, userPassword, userPhone);\nI.waitForText(userName, 5);\nI.see(userName);\nI.sendGetRequest('/api/users').then(function(resp) {\n    const usersList = resp.body.data;\n    const lastUserId = usersList[usersList.length-1].id;\n    console.log(lastUserId);\n    I.sendDeleteRequest('/api/users/' + lastUserId);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "50ca4e70-c520-4fb9-890d-e128d5ced8d2",
      "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "edit created user @users",
      "fullTitle": "Users: edit created user @users",
      "timedOut": false,
      "duration": 300,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.editCreatedUser(editUserName);\n        I.waitForText(editUserName, 5);\n        I.see(editUserName);\n        I.sendDeleteRequest('/api/users/' + userId);\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "e64e1ec1-3fe7-4871-bff3-d120136ee84d",
      "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete created user @users",
      "fullTitle": "Users: delete created user @users",
      "timedOut": false,
      "duration": 173,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "I.sendPostRequest('/api/users', JSON.stringify({'email': userEmail, \"name\": userName, \"password\": userPassword, \"role\": 2, \"phone\": userPhone, \"isBlocked\": false}))\n    .then(function(resp) {\n        userId = resp.body.data.id;\n        console.log(userId);\n        I.refresh();\n        I.waitForText(userName);\n        usersPage.deleteCreatedUser();\n        I.waitUntil(function () {\n            I.dontSee(userName);\n            }\n        );\n        //I.dontSee(userName);\n    });",
      "err": {},
      "isRoot": false,
      "uuid": "849f7f6b-ca7b-454a-aedb-aa44012d9ecb",
      "parentUUID": "698dd3a5-d9ce-421a-acab-ed9a3badbd1f",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}