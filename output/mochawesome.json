{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2017-11-24T11:10:51.724Z",
    "end": "2017-11-24T11:11:06.612Z",
    "duration": 14888,
    "testsRegistered": 12,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 11,
    "hasSkipped": true,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Test login",
        "suites": [],
        "tests": [
          {
            "title": "test visible @login",
            "fullTitle": "Test login: test visible @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "9575c5df-5f5d-4a6b-af41-fba6ec532447",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login positive @login",
            "fullTitle": "Test login: login positive @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b8a8620b-a4bd-458f-aaf2-185843c6e327",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with empty fields @login",
            "fullTitle": "Test login: login with empty fields @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "462378ba-542d-4f61-a4c1-f3fd3b8db6ce",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with incorrect data @login",
            "fullTitle": "Test login: login with incorrect data @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "eb786863-a2da-423b-83cd-9d4e37854848",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\login_test.js",
        "uuid": "b9c92954-1239-4355-8cab-40b5287a16a2",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Test login: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "9cccfcd6-15f0-45ca-a07e-f2de91feec49",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Test login: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "84c8f5af-eb2a-476e-a761-d8a5e2e91a13",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Test login: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "17c75349-9600-4fcf-bdc6-9ea3700e15c0",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Test login: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "7d1ab42a-1240-42d3-8de1-20377260474e",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Test login: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "b4be876c-815d-4d6f-8846-f6247b5b21b7",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "C:\\Users\\chief\\DPP\\CodeceptJS\\try2\\login_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "test visible @login",
            "fullTitle": "Test login: test visible @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "9575c5df-5f5d-4a6b-af41-fba6ec532447",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login positive @login",
            "fullTitle": "Test login: login positive @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b8a8620b-a4bd-458f-aaf2-185843c6e327",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with empty fields @login",
            "fullTitle": "Test login: login with empty fields @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "462378ba-542d-4f61-a4c1-f3fd3b8db6ce",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with incorrect data @login",
            "fullTitle": "Test login: login with incorrect data @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "eb786863-a2da-423b-83cd-9d4e37854848",
            "parentUUID": "b9c92954-1239-4355-8cab-40b5287a16a2",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Partners",
        "suites": [],
        "tests": [
          {
            "title": "create partner @partners",
            "fullTitle": "Partners: create partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0c1e2927-5c55-4a71-90cb-239c34a29f37",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created partner @partners",
            "fullTitle": "Partners: edit created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "9f2a1ce1-877a-4aed-8088-7fd306dde927",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "copy edited partner @partners",
            "fullTitle": "Partners: copy edited partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5754cf9c-eb64-48d2-aea7-f4f5fc14274c",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created partner @partners",
            "fullTitle": "Partners: delete created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e3162cb0-6694-4ee1-a8bd-58eecbe5ac9c",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\partners_test.js",
        "uuid": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Partners: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "0eca79e9-732b-4e83-9d71-bd188a033f46",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Partners: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "48c12777-c9e5-454d-a13a-ff92026c69d5",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Partners: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "36100266-0303-4e2a-a526-6c1e17448410",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Partners: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "41c9349e-ebdd-4a5f-9812-780de4e49af9",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Partners: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "fc4ef9bb-9fcb-499d-b0b3-846122d62ebd",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "C:\\Users\\chief\\DPP\\CodeceptJS\\try2\\partners_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "create partner @partners",
            "fullTitle": "Partners: create partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0c1e2927-5c55-4a71-90cb-239c34a29f37",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created partner @partners",
            "fullTitle": "Partners: edit created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "9f2a1ce1-877a-4aed-8088-7fd306dde927",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "copy edited partner @partners",
            "fullTitle": "Partners: copy edited partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5754cf9c-eb64-48d2-aea7-f4f5fc14274c",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created partner @partners",
            "fullTitle": "Partners: delete created partner @partners",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e3162cb0-6694-4ee1-a8bd-58eecbe5ac9c",
            "parentUUID": "60ad3f88-a6c0-42cb-bd1f-187d7b80ce19",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Processing points",
        "suites": [],
        "tests": [
          {
            "title": "As admin I should be able to create new process @process",
            "fullTitle": "Processing points: As admin I should be able to create new process @process",
            "timedOut": false,
            "duration": 8513,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "context": "\"As_admin_I_2ec629d2-02e1-4d73-b009-c2e248bfa6ec.failed.png\"",
            "code": "processPage.addProcessingPoint(processName, tagsForProcess, ownerForProcess, descriptionForProcess, user, password, port, host, dir);\nprocessPage.addRulesForProcess(caseName, satisfyRegex, followingActions);\nprocessPage.pushButtonAddPoint();\nI.see(processName);",
            "err": {
              "message": "ElementNotVisibleError: element not visible\n  (Session info: chrome=62.0.3202.94)\n  (Driver info: chromedriver=2.33.506120 (e3e53437346286c0bc2d2dc9aa4915ba81d9023f),platform=Windows NT 10.0.15063 x86_64)",
              "estack": "element not visible\n  (Session info: chrome=62.0.3202.94)\n  (Driver info: chromedriver=2.33.506120 (e3e53437346286c0bc2d2dc9aa4915ba81d9023f),platform=Windows NT 10.0.15063 x86_64)\n\nScenario Steps:\n\n- I.click({\"css\":\"[formarrayname=processing_rules] mat-select\"}) at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input.ng-touched\", \"/(.*).txt/\") at Object.addRulesForProcess (pages\\processPage.js:82:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=satisfy_type]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formarrayname=rule_sets] [formcontrolname=name]\", \"Rule45\") at Object.addRulesForProcess (pages\\processPage.js:80:7)\n- I.fillField(\"[formcontrolname=local_dir]\", \"localDir 53\") at Object.addProcessingPoint (pages\\processPage.js:75:7)\n- I.fillField(\"[formcontrolname=dir]\", \"localDir 53\") at Object.addProcessingPoint (pages\\processPage.js:74:7)\n- I.fillField(\"[formcontrolname=port]\", 53) at Object.addProcessingPoint (pages\\processPage.js:73:7)\n- I.fillField(\"[formcontrolname=port]\", 53) at Object.addProcessingPoint (pages\\processPage.js:72:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=interval]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=password]\", 1511521851755) at Object.addProcessingPoint (pages\\processPage.js:70:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=connection_method]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=user]\", \"User452\") at Object.addProcessingPoint (pages\\processPage.js:68:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=encryption]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input[formcontrolname=tags]\", 8670) at Object.addProcessingPoint (pages\\processPage.js:66:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=direction]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input[formcontrolname=owner]\", \"Owner87\") at Object.addProcessingPoint (pages\\processPage.js:64:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=protocol]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=description]\", \"This information about Proccess520 with this 8670 and this Owner87 is very impotent\") at Object.addProcessingPoint (pages\\processPage.js:62:7)\n- I.pressKey(\"ESCAPE\") at Object.addProcessingPoint (pages\\processPage.js:61:7)\n- I.click(\"mat-option:last-of-type\") at Object.addProcessingPoint (pages\\processPage.js:60:7)\n- I.click(\"mat-option:first-of-type\") at Object.addProcessingPoint (pages\\processPage.js:59:7)\n- I.click(\"[formcontrolname=partners]\") at Object.addProcessingPoint (pages\\processPage.js:58:7)\n- I.fillField(\"input[formcontrolname=name]\", \"Proccess520\") at Object.addProcessingPoint (pages\\processPage.js:57:7)\n- I.click(\"button[id=add-point-button]\") at Object.addProcessingPoint (pages\\processPage.js:56:7)\n\n"
            },
            "isRoot": false,
            "uuid": "2ec629d2-02e1-4d73-b009-c2e248bfa6ec",
            "parentUUID": "7e42319f-42bf-46d2-9334-48d67af03f19",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\processing_points_test.js",
        "uuid": "7e42319f-42bf-46d2-9334-48d67af03f19",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Processing points: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "fec87734-c415-4067-b09f-6458eec9217f",
            "parentUUID": "7e42319f-42bf-46d2-9334-48d67af03f19",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Processing points: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "4efe4a9e-8ad5-44bc-aa95-b786c8a268ef",
            "parentUUID": "7e42319f-42bf-46d2-9334-48d67af03f19",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Processing points: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 6306,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "I.resizeWindow('maximize');\nI.amOnPage('/');\nloginPage.sendForm('admin@admin.com', 'qweqwe');\nI.click('[href=\"/points\"]');\nprocessName = \"Proccess\" + Math.floor(Math.random()*1000);\ntagsForProcess = Math.floor(Math.random()*10000);\nownerForProcess = \"Owner\" + Math.floor(Math.random()*100);\ndescriptionForProcess = \"This information about \" + processName + \" with this \" + tagsForProcess + \" and this \" + ownerForProcess + \" is very impotent\";\nuser = \"User\" + Math.floor(Math.random()*1000);\npassword =  Date.now();\nport = Math.floor(Math.random()*100);\nhost = port;\ndir = \"localDir \" + port;\ncaseName = \"Rule\" + Math.floor(Math.random()*100);\nsatisfyRegex = '/(.*)\\.txt/';\nfollowingActions = dir;",
            "err": {},
            "isRoot": false,
            "uuid": "49879062-97a7-4c77-af4e-77ba3aa303af",
            "parentUUID": "7e42319f-42bf-46d2-9334-48d67af03f19",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Processing points: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "a33c868c-53c0-43a6-8dae-b38188bb4071",
            "parentUUID": "7e42319f-42bf-46d2-9334-48d67af03f19",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Processing points: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 34,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "6f573767-e933-4595-bb62-a84dceadbdd4",
            "parentUUID": "7e42319f-42bf-46d2-9334-48d67af03f19",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "C:\\Users\\chief\\DPP\\CodeceptJS\\try2\\processing_points_test.js",
        "passes": [],
        "failures": [
          {
            "title": "As admin I should be able to create new process @process",
            "fullTitle": "Processing points: As admin I should be able to create new process @process",
            "timedOut": false,
            "duration": 8513,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "context": "\"As_admin_I_2ec629d2-02e1-4d73-b009-c2e248bfa6ec.failed.png\"",
            "code": "processPage.addProcessingPoint(processName, tagsForProcess, ownerForProcess, descriptionForProcess, user, password, port, host, dir);\nprocessPage.addRulesForProcess(caseName, satisfyRegex, followingActions);\nprocessPage.pushButtonAddPoint();\nI.see(processName);",
            "err": {
              "message": "ElementNotVisibleError: element not visible\n  (Session info: chrome=62.0.3202.94)\n  (Driver info: chromedriver=2.33.506120 (e3e53437346286c0bc2d2dc9aa4915ba81d9023f),platform=Windows NT 10.0.15063 x86_64)",
              "estack": "element not visible\n  (Session info: chrome=62.0.3202.94)\n  (Driver info: chromedriver=2.33.506120 (e3e53437346286c0bc2d2dc9aa4915ba81d9023f),platform=Windows NT 10.0.15063 x86_64)\n\nScenario Steps:\n\n- I.click({\"css\":\"[formarrayname=processing_rules] mat-select\"}) at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input.ng-touched\", \"/(.*).txt/\") at Object.addRulesForProcess (pages\\processPage.js:82:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=satisfy_type]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formarrayname=rule_sets] [formcontrolname=name]\", \"Rule45\") at Object.addRulesForProcess (pages\\processPage.js:80:7)\n- I.fillField(\"[formcontrolname=local_dir]\", \"localDir 53\") at Object.addProcessingPoint (pages\\processPage.js:75:7)\n- I.fillField(\"[formcontrolname=dir]\", \"localDir 53\") at Object.addProcessingPoint (pages\\processPage.js:74:7)\n- I.fillField(\"[formcontrolname=port]\", 53) at Object.addProcessingPoint (pages\\processPage.js:73:7)\n- I.fillField(\"[formcontrolname=port]\", 53) at Object.addProcessingPoint (pages\\processPage.js:72:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=interval]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=password]\", 1511521851755) at Object.addProcessingPoint (pages\\processPage.js:70:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=connection_method]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=user]\", \"User452\") at Object.addProcessingPoint (pages\\processPage.js:68:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=encryption]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input[formcontrolname=tags]\", 8670) at Object.addProcessingPoint (pages\\processPage.js:66:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=direction]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input[formcontrolname=owner]\", \"Owner87\") at Object.addProcessingPoint (pages\\processPage.js:64:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=protocol]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=description]\", \"This information about Proccess520 with this 8670 and this Owner87 is very impotent\") at Object.addProcessingPoint (pages\\processPage.js:62:7)\n- I.pressKey(\"ESCAPE\") at Object.addProcessingPoint (pages\\processPage.js:61:7)\n- I.click(\"mat-option:last-of-type\") at Object.addProcessingPoint (pages\\processPage.js:60:7)\n- I.click(\"mat-option:first-of-type\") at Object.addProcessingPoint (pages\\processPage.js:59:7)\n- I.click(\"[formcontrolname=partners]\") at Object.addProcessingPoint (pages\\processPage.js:58:7)\n- I.fillField(\"input[formcontrolname=name]\", \"Proccess520\") at Object.addProcessingPoint (pages\\processPage.js:57:7)\n- I.click(\"button[id=add-point-button]\") at Object.addProcessingPoint (pages\\processPage.js:56:7)\n\n"
            },
            "isRoot": false,
            "uuid": "2ec629d2-02e1-4d73-b009-c2e248bfa6ec",
            "parentUUID": "7e42319f-42bf-46d2-9334-48d67af03f19",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 8513,
        "rootEmpty": false
      },
      {
        "title": "Users",
        "suites": [],
        "tests": [
          {
            "title": "create user @users",
            "fullTitle": "Users: create user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "788fbdfc-f1b4-4424-8736-3c7d43e42305",
            "parentUUID": "4a33aa46-e5ba-4c18-a153-1134372fa564",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created user @users",
            "fullTitle": "Users: edit created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "f90d1e19-788c-43a2-92a8-dfd2bedfb823",
            "parentUUID": "4a33aa46-e5ba-4c18-a153-1134372fa564",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created user @users",
            "fullTitle": "Users: delete created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e3dea98a-2637-4a8b-81d2-9bbd53b85107",
            "parentUUID": "4a33aa46-e5ba-4c18-a153-1134372fa564",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\users_test.js",
        "uuid": "4a33aa46-e5ba-4c18-a153-1134372fa564",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Users: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "5ca7ea89-f31d-4b55-bb92-a74d7cb92668",
            "parentUUID": "4a33aa46-e5ba-4c18-a153-1134372fa564",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Users: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "adb16df4-5b18-4218-8960-1a39b9dc6340",
            "parentUUID": "4a33aa46-e5ba-4c18-a153-1134372fa564",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Users: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "58191093-fda0-45ee-9f27-296d59a6c160",
            "parentUUID": "4a33aa46-e5ba-4c18-a153-1134372fa564",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Users: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "273c68e3-05ea-4fcd-8770-1da0396f8ce3",
            "parentUUID": "4a33aa46-e5ba-4c18-a153-1134372fa564",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Users: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "631014ad-8114-4a74-b913-8eff4a7d3d2e",
            "parentUUID": "4a33aa46-e5ba-4c18-a153-1134372fa564",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "C:\\Users\\chief\\DPP\\CodeceptJS\\try2\\users_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "create user @users",
            "fullTitle": "Users: create user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "788fbdfc-f1b4-4424-8736-3c7d43e42305",
            "parentUUID": "4a33aa46-e5ba-4c18-a153-1134372fa564",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created user @users",
            "fullTitle": "Users: edit created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "f90d1e19-788c-43a2-92a8-dfd2bedfb823",
            "parentUUID": "4a33aa46-e5ba-4c18-a153-1134372fa564",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created user @users",
            "fullTitle": "Users: delete created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e3dea98a-2637-4a8b-81d2-9bbd53b85107",
            "parentUUID": "4a33aa46-e5ba-4c18-a153-1134372fa564",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 3,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 0,
    "uuid": "90411740-379c-4130-a73d-c12211b9a5b1",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "As admin I should be able to create new process @process",
      "fullTitle": "Processing points: As admin I should be able to create new process @process",
      "timedOut": false,
      "duration": 8513,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "\"As_admin_I_2ec629d2-02e1-4d73-b009-c2e248bfa6ec.failed.png\"",
      "code": "processPage.addProcessingPoint(processName, tagsForProcess, ownerForProcess, descriptionForProcess, user, password, port, host, dir);\nprocessPage.addRulesForProcess(caseName, satisfyRegex, followingActions);\nprocessPage.pushButtonAddPoint();\nI.see(processName);",
      "err": {
        "message": "ElementNotVisibleError: element not visible\n  (Session info: chrome=62.0.3202.94)\n  (Driver info: chromedriver=2.33.506120 (e3e53437346286c0bc2d2dc9aa4915ba81d9023f),platform=Windows NT 10.0.15063 x86_64)",
        "estack": "element not visible\n  (Session info: chrome=62.0.3202.94)\n  (Driver info: chromedriver=2.33.506120 (e3e53437346286c0bc2d2dc9aa4915ba81d9023f),platform=Windows NT 10.0.15063 x86_64)\n\nScenario Steps:\n\n- I.click({\"css\":\"[formarrayname=processing_rules] mat-select\"}) at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input.ng-touched\", \"/(.*).txt/\") at Object.addRulesForProcess (pages\\processPage.js:82:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=satisfy_type]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formarrayname=rule_sets] [formcontrolname=name]\", \"Rule45\") at Object.addRulesForProcess (pages\\processPage.js:80:7)\n- I.fillField(\"[formcontrolname=local_dir]\", \"localDir 53\") at Object.addProcessingPoint (pages\\processPage.js:75:7)\n- I.fillField(\"[formcontrolname=dir]\", \"localDir 53\") at Object.addProcessingPoint (pages\\processPage.js:74:7)\n- I.fillField(\"[formcontrolname=port]\", 53) at Object.addProcessingPoint (pages\\processPage.js:73:7)\n- I.fillField(\"[formcontrolname=port]\", 53) at Object.addProcessingPoint (pages\\processPage.js:72:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=interval]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=password]\", 1511521851755) at Object.addProcessingPoint (pages\\processPage.js:70:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=connection_method]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=user]\", \"User452\") at Object.addProcessingPoint (pages\\processPage.js:68:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=encryption]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input[formcontrolname=tags]\", 8670) at Object.addProcessingPoint (pages\\processPage.js:66:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=direction]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input[formcontrolname=owner]\", \"Owner87\") at Object.addProcessingPoint (pages\\processPage.js:64:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=protocol]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=description]\", \"This information about Proccess520 with this 8670 and this Owner87 is very impotent\") at Object.addProcessingPoint (pages\\processPage.js:62:7)\n- I.pressKey(\"ESCAPE\") at Object.addProcessingPoint (pages\\processPage.js:61:7)\n- I.click(\"mat-option:last-of-type\") at Object.addProcessingPoint (pages\\processPage.js:60:7)\n- I.click(\"mat-option:first-of-type\") at Object.addProcessingPoint (pages\\processPage.js:59:7)\n- I.click(\"[formcontrolname=partners]\") at Object.addProcessingPoint (pages\\processPage.js:58:7)\n- I.fillField(\"input[formcontrolname=name]\", \"Proccess520\") at Object.addProcessingPoint (pages\\processPage.js:57:7)\n- I.click(\"button[id=add-point-button]\") at Object.addProcessingPoint (pages\\processPage.js:56:7)\n\n"
      },
      "isRoot": false,
      "uuid": "2ec629d2-02e1-4d73-b009-c2e248bfa6ec",
      "parentUUID": "7e42319f-42bf-46d2-9334-48d67af03f19",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [],
  "allFailures": [
    {
      "title": "As admin I should be able to create new process @process",
      "fullTitle": "Processing points: As admin I should be able to create new process @process",
      "timedOut": false,
      "duration": 8513,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "context": "\"As_admin_I_2ec629d2-02e1-4d73-b009-c2e248bfa6ec.failed.png\"",
      "code": "processPage.addProcessingPoint(processName, tagsForProcess, ownerForProcess, descriptionForProcess, user, password, port, host, dir);\nprocessPage.addRulesForProcess(caseName, satisfyRegex, followingActions);\nprocessPage.pushButtonAddPoint();\nI.see(processName);",
      "err": {
        "message": "ElementNotVisibleError: element not visible\n  (Session info: chrome=62.0.3202.94)\n  (Driver info: chromedriver=2.33.506120 (e3e53437346286c0bc2d2dc9aa4915ba81d9023f),platform=Windows NT 10.0.15063 x86_64)",
        "estack": "element not visible\n  (Session info: chrome=62.0.3202.94)\n  (Driver info: chromedriver=2.33.506120 (e3e53437346286c0bc2d2dc9aa4915ba81d9023f),platform=Windows NT 10.0.15063 x86_64)\n\nScenario Steps:\n\n- I.click({\"css\":\"[formarrayname=processing_rules] mat-select\"}) at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input.ng-touched\", \"/(.*).txt/\") at Object.addRulesForProcess (pages\\processPage.js:82:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=satisfy_type]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formarrayname=rule_sets] [formcontrolname=name]\", \"Rule45\") at Object.addRulesForProcess (pages\\processPage.js:80:7)\n- I.fillField(\"[formcontrolname=local_dir]\", \"localDir 53\") at Object.addProcessingPoint (pages\\processPage.js:75:7)\n- I.fillField(\"[formcontrolname=dir]\", \"localDir 53\") at Object.addProcessingPoint (pages\\processPage.js:74:7)\n- I.fillField(\"[formcontrolname=port]\", 53) at Object.addProcessingPoint (pages\\processPage.js:73:7)\n- I.fillField(\"[formcontrolname=port]\", 53) at Object.addProcessingPoint (pages\\processPage.js:72:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=interval]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=password]\", 1511521851755) at Object.addProcessingPoint (pages\\processPage.js:70:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=connection_method]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=user]\", \"User452\") at Object.addProcessingPoint (pages\\processPage.js:68:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=encryption]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input[formcontrolname=tags]\", 8670) at Object.addProcessingPoint (pages\\processPage.js:66:7)\n- I.click(\"mat-option:last-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=direction]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"input[formcontrolname=owner]\", \"Owner87\") at Object.addProcessingPoint (pages\\processPage.js:64:7)\n- I.click(\"mat-option:first-of-type\") at Object.chooseDropDownOption (pages\\processPage.js:52:7)\n- I.click(\"[formcontrolname=protocol]\") at Object.chooseDropDownOption (pages\\processPage.js:51:7)\n- I.fillField(\"[formcontrolname=description]\", \"This information about Proccess520 with this 8670 and this Owner87 is very impotent\") at Object.addProcessingPoint (pages\\processPage.js:62:7)\n- I.pressKey(\"ESCAPE\") at Object.addProcessingPoint (pages\\processPage.js:61:7)\n- I.click(\"mat-option:last-of-type\") at Object.addProcessingPoint (pages\\processPage.js:60:7)\n- I.click(\"mat-option:first-of-type\") at Object.addProcessingPoint (pages\\processPage.js:59:7)\n- I.click(\"[formcontrolname=partners]\") at Object.addProcessingPoint (pages\\processPage.js:58:7)\n- I.fillField(\"input[formcontrolname=name]\", \"Proccess520\") at Object.addProcessingPoint (pages\\processPage.js:57:7)\n- I.click(\"button[id=add-point-button]\") at Object.addProcessingPoint (pages\\processPage.js:56:7)\n\n"
      },
      "isRoot": false,
      "uuid": "2ec629d2-02e1-4d73-b009-c2e248bfa6ec",
      "parentUUID": "7e42319f-42bf-46d2-9334-48d67af03f19",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}