{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2017-12-05T09:33:41.648Z",
    "end": "2017-12-05T09:34:03.285Z",
    "duration": 21637,
    "testsRegistered": 15,
    "passPercent": 26.7,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 11,
    "hasSkipped": true,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Test login",
        "suites": [],
        "tests": [
          {
            "title": "test visible @login",
            "fullTitle": "Test login: test visible @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5c9d2f2f-b12d-4ff4-8ae2-96a8eb8c9f45",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login positive @login",
            "fullTitle": "Test login: login positive @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "3c9d8ec3-b7c7-45bb-8dfb-611b59cac787",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with empty fields @login",
            "fullTitle": "Test login: login with empty fields @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "085a2acd-bd56-4af8-ba4c-c7ce0dbfd65b",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with incorrect data @login",
            "fullTitle": "Test login: login with incorrect data @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "a5b23890-21f9-4159-8ba7-1c4aaabb4360",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\login_test.js",
        "uuid": "b496dcad-e14b-4aa4-a533-0a74eb625661",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Test login: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "24740e9c-88c4-4bcf-940c-18ff2e344810",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Test login: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "99fec994-f8ee-4ad7-8ad7-481e475de0cb",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Test login: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "466b9a41-4738-4651-8b48-25133a70e1ae",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Test login: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "af0222a0-d565-47a1-a538-1de361ac9bf8",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Test login: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "6ef28219-7f04-4123-acec-b1413a0b5384",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\login_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "test visible @login",
            "fullTitle": "Test login: test visible @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5c9d2f2f-b12d-4ff4-8ae2-96a8eb8c9f45",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login positive @login",
            "fullTitle": "Test login: login positive @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "3c9d8ec3-b7c7-45bb-8dfb-611b59cac787",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with empty fields @login",
            "fullTitle": "Test login: login with empty fields @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "085a2acd-bd56-4af8-ba4c-c7ce0dbfd65b",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "login with incorrect data @login",
            "fullTitle": "Test login: login with incorrect data @login",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "a5b23890-21f9-4159-8ba7-1c4aaabb4360",
            "parentUUID": "b496dcad-e14b-4aa4-a533-0a74eb625661",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Partners",
        "suites": [],
        "tests": [
          {
            "title": "create partner @partners",
            "fullTitle": "Partners: create partner @partners",
            "timedOut": false,
            "duration": 5175,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "partnersPage.createNewPartner(partnerName, partnerEmail, partnerCompany, partnerPhone, note, operationNumber, institutionIdentifier);\nI.waitForText(partnerName, 5);\nI.see(partnerName);",
            "err": {},
            "isRoot": false,
            "uuid": "c65537ef-4a48-47d8-b416-3f3256f9bc4d",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "edit created partner @partners",
            "fullTitle": "Partners: edit created partner @partners",
            "timedOut": false,
            "duration": 3833,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "partnersPage.editCreatedPartner(editPartnerName, editPartnerEmail, editPartnerPhone);\nI.waitForText(editPartnerName, 5);\nI.see(editPartnerName);\nI.see(editPartnerEmail);\nI.see(editPartnerPhone);",
            "err": {},
            "isRoot": false,
            "uuid": "5676318b-7920-4d5f-a772-6f11f4b41875",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "copy edited partner @partners",
            "fullTitle": "Partners: copy edited partner @partners",
            "timedOut": false,
            "duration": 2125,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "partnersPage.copyEditedPartner();\nI.waitForElement('[name=form]');",
            "err": {},
            "isRoot": false,
            "uuid": "ebe58f17-9c0a-4f30-884b-e78686ce7ecc",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete created partner @partners",
            "fullTitle": "Partners: delete created partner @partners",
            "timedOut": false,
            "duration": 2509,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "partnersPage.deleteCreatedPartner();\nI.dontSee(editPartnerName);",
            "err": {},
            "isRoot": false,
            "uuid": "e4be046c-7beb-454e-aa64-8bc549ee083c",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\partners_test.js",
        "uuid": "2e258400-c1bc-48e6-9299-9add18e46cc5",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Partners: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "e1b2ea5b-691a-4c80-97b3-baa7159918b5",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Partners: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "ef327442-5294-45da-a6d0-cb9aa43e58ed",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Partners: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 957,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "I.resizeWindow('maximize');\nI.amOnPage('/');\nI.sendPostRequest('http://localhost:8080/api/auth/login',\n    {\"email\": \"admin@admin.com\", \"password\": \"qweqwe\"},\n    {headers: {'Accept': 'application/json', 'Content-Type': 'application/json'}}).then(function(resp) {\n    token = resp.body.access_token;\n    I.executeScript(`localStorage.setItem('access_token', '${token}')`);\n    I.executeScript(`localStorage.setItem('user', '{\"data\":{\"id\":1,\"name\":\"admin\",\"email\":\"admin@admin.com\",\"phone\":null,\"isBlocked\":false,\"role\":{\"data\":{\"id\":1,\"name\":\"admin\"}}}}')`);\n    I.refresh();\n    I.click('[href=\"/partners\"]');\n});\n//oginPage.sendForm('admin@admin.com', 'qweqwe');\npartnerName = \"user\" + Math.floor(Math.random()*100);\npartnerEmail = \"mail\" + Math.floor(Math.random()*100) + \"@mail.com\";;\npartnerCompany = \"LTD\" + Math.floor(Math.random()*100);\npartnerPhone = Math.floor(Math.random()*1000);\nnote = \"This information about \" + partnerName + \" is very impotent\";\noperationNumber =  Math.floor(Math.random()*1000);\ninstitutionIdentifier = Math.floor(Math.random()*1000);\n//I.click('[href=\"/partners\"]');\neditPartnerName = \"Change \" + partnerName;\neditPartnerEmail = \"new_\" + partnerEmail;\neditPartnerPhone = Math.floor(Math.random()*100000);",
            "err": {},
            "isRoot": false,
            "uuid": "d0673dfa-3309-480a-b40a-212522504d9f",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Partners: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "2cca5e76-4976-466e-9ea4-4786ab8b5b8d",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Partners: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 37,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "f6be3edd-0fbc-4ef9-aa0c-ddfa135cbb75",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\partners_test.js",
        "passes": [
          {
            "title": "create partner @partners",
            "fullTitle": "Partners: create partner @partners",
            "timedOut": false,
            "duration": 5175,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "partnersPage.createNewPartner(partnerName, partnerEmail, partnerCompany, partnerPhone, note, operationNumber, institutionIdentifier);\nI.waitForText(partnerName, 5);\nI.see(partnerName);",
            "err": {},
            "isRoot": false,
            "uuid": "c65537ef-4a48-47d8-b416-3f3256f9bc4d",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "edit created partner @partners",
            "fullTitle": "Partners: edit created partner @partners",
            "timedOut": false,
            "duration": 3833,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "partnersPage.editCreatedPartner(editPartnerName, editPartnerEmail, editPartnerPhone);\nI.waitForText(editPartnerName, 5);\nI.see(editPartnerName);\nI.see(editPartnerEmail);\nI.see(editPartnerPhone);",
            "err": {},
            "isRoot": false,
            "uuid": "5676318b-7920-4d5f-a772-6f11f4b41875",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "copy edited partner @partners",
            "fullTitle": "Partners: copy edited partner @partners",
            "timedOut": false,
            "duration": 2125,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "partnersPage.copyEditedPartner();\nI.waitForElement('[name=form]');",
            "err": {},
            "isRoot": false,
            "uuid": "ebe58f17-9c0a-4f30-884b-e78686ce7ecc",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "delete created partner @partners",
            "fullTitle": "Partners: delete created partner @partners",
            "timedOut": false,
            "duration": 2509,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "partnersPage.deleteCreatedPartner();\nI.dontSee(editPartnerName);",
            "err": {},
            "isRoot": false,
            "uuid": "e4be046c-7beb-454e-aa64-8bc549ee083c",
            "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 13642,
        "rootEmpty": false
      },
      {
        "title": "Processing points",
        "suites": [],
        "tests": [
          {
            "title": "As admin I should be able to create new process @process",
            "fullTitle": "Processing points: As admin I should be able to create new process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0e74d785-bf30-4a4f-a1ec-f67dd93a56a4",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to edit created process @process",
            "fullTitle": "Processing points: As admin I should be able to edit created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b0f2a6fd-487f-459c-ae12-e18099d46497",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to copy created process @process",
            "fullTitle": "Processing points: As admin I should be able to copy created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "62bb1aaa-4735-46e2-961e-fb8dd80fa983",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to delete created process @process @deleteProcess",
            "fullTitle": "Processing points: As admin I should be able to delete created process @process @deleteProcess",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "48dc65cd-5561-4400-a177-0f3ddf2d3fc6",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\processing_points_test.js",
        "uuid": "ff5ec68f-298d-4244-a244-f84c3d186deb",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Processing points: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "9d50b395-4304-4638-be0e-6f9eff869bc5",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Processing points: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "dfee539b-560f-45cc-8324-24d9a104f6fb",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Processing points: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "f260e592-3ae3-4800-a923-42555e63d583",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Processing points: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "a5792afd-e3d9-4ec0-8fbb-93f273eea605",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Processing points: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "ee41c637-9092-4399-96ab-839b51e3f3ad",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\processing_points_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "As admin I should be able to create new process @process",
            "fullTitle": "Processing points: As admin I should be able to create new process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0e74d785-bf30-4a4f-a1ec-f67dd93a56a4",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to edit created process @process",
            "fullTitle": "Processing points: As admin I should be able to edit created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b0f2a6fd-487f-459c-ae12-e18099d46497",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to copy created process @process",
            "fullTitle": "Processing points: As admin I should be able to copy created process @process",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "62bb1aaa-4735-46e2-961e-fb8dd80fa983",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "As admin I should be able to delete created process @process @deleteProcess",
            "fullTitle": "Processing points: As admin I should be able to delete created process @process @deleteProcess",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "48dc65cd-5561-4400-a177-0f3ddf2d3fc6",
            "parentUUID": "ff5ec68f-298d-4244-a244-f84c3d186deb",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Users",
        "suites": [],
        "tests": [
          {
            "title": "create user @users",
            "fullTitle": "Users: create user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0ee9e0e0-fd10-4f4f-843d-b5e9cadeb964",
            "parentUUID": "592295ae-9ab5-43d9-8521-214474e208df",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created user @users",
            "fullTitle": "Users: edit created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "eb5a75d4-db7a-4577-ad3c-1ad4b773a77b",
            "parentUUID": "592295ae-9ab5-43d9-8521-214474e208df",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created user @users",
            "fullTitle": "Users: delete created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "571b554c-5263-45db-9165-10d1ebac0bd8",
            "parentUUID": "592295ae-9ab5-43d9-8521-214474e208df",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 0,
        "file": "\\users_test.js",
        "uuid": "592295ae-9ab5-43d9-8521-214474e208df",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: codeceptjs.beforeSuite",
            "fullTitle": "Users: \"before all\" hook: codeceptjs.beforeSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteSetup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "557dddab-4d46-4524-b499-43b9a08338f5",
            "parentUUID": "592295ae-9ab5-43d9-8521-214474e208df",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: codeceptjs.before",
            "fullTitle": "Users: \"before each\" hook: codeceptjs.before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.setup(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "c094a1a7-f250-4afb-abfa-0b42dec293c7",
            "parentUUID": "592295ae-9ab5-43d9-8521-214474e208df",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: Before",
            "fullTitle": "Users: \"before each\" hook: Before",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.hook.started, suite);\n  recorder.startUnlessRunning();\n  this.test.body = fn.toString();\n  let res = fn.apply(this, getInjectedArguments(fn));\n  if (isGenerator(fn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, event.test, err);\n      done(err);\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(fn)) {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "7b8cf4f6-1d10-4613-bc75-475391c77d9a",
            "parentUUID": "592295ae-9ab5-43d9-8521-214474e208df",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: codeceptjs.afterSuite",
            "fullTitle": "Users: \"after all\" hook: codeceptjs.afterSuite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.suiteTeardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "92057f35-e4f0-4fc8-8fb5-c85138889d3c",
            "parentUUID": "592295ae-9ab5-43d9-8521-214474e208df",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook: finalize codeceptjs",
            "fullTitle": "Users: \"after each\" hook: finalize codeceptjs",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "scenario.teardown(suite)",
            "err": {},
            "isRoot": false,
            "uuid": "8165a66c-388a-4105-a5bd-6bc5710c74ba",
            "parentUUID": "592295ae-9ab5-43d9-8521-214474e208df",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "D:\\DPP\\CodeceptJS\\try5\\users_test.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "create user @users",
            "fullTitle": "Users: create user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0ee9e0e0-fd10-4f4f-843d-b5e9cadeb964",
            "parentUUID": "592295ae-9ab5-43d9-8521-214474e208df",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "edit created user @users",
            "fullTitle": "Users: edit created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "eb5a75d4-db7a-4577-ad3c-1ad4b773a77b",
            "parentUUID": "592295ae-9ab5-43d9-8521-214474e208df",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "delete created user @users",
            "fullTitle": "Users: delete created user @users",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "recorder.errHandler(function (err) {\n  recorder.session.start('teardown');\n  event.emit(event.test.failed, test, err);\n  recorder.add(() => done(err));\n});\ntry {\n  event.emit(event.test.started, test);\n  let res = testFn.apply(test, getInjectedArguments(testFn, test));\n  if (isGenerator(testFn)) {\n    try {\n      res.next(); // running test\n    } catch (err) {\n      event.emit(event.test.failed, test, err);\n      done(err);\n      return test;\n    }\n    recorder.catch(); // catching possible errors in promises\n    resumeTest(res, () => {\n      recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n      recorder.add('finish generator with no error', () => done()); // finish him\n    });\n  }\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  if (!isGenerator(testFn)) {\n    recorder.add('fire test.passed', () => event.emit(event.test.passed, test));\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }\n}",
            "err": {},
            "isRoot": false,
            "uuid": "571b554c-5263-45db-9165-10d1ebac0bd8",
            "parentUUID": "592295ae-9ab5-43d9-8521-214474e208df",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 3,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 0,
    "uuid": "28ea832f-5736-4f97-9772-3aacd5fbfdff",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "create partner @partners",
      "fullTitle": "Partners: create partner @partners",
      "timedOut": false,
      "duration": 5175,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "partnersPage.createNewPartner(partnerName, partnerEmail, partnerCompany, partnerPhone, note, operationNumber, institutionIdentifier);\nI.waitForText(partnerName, 5);\nI.see(partnerName);",
      "err": {},
      "isRoot": false,
      "uuid": "c65537ef-4a48-47d8-b416-3f3256f9bc4d",
      "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "edit created partner @partners",
      "fullTitle": "Partners: edit created partner @partners",
      "timedOut": false,
      "duration": 3833,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "partnersPage.editCreatedPartner(editPartnerName, editPartnerEmail, editPartnerPhone);\nI.waitForText(editPartnerName, 5);\nI.see(editPartnerName);\nI.see(editPartnerEmail);\nI.see(editPartnerPhone);",
      "err": {},
      "isRoot": false,
      "uuid": "5676318b-7920-4d5f-a772-6f11f4b41875",
      "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "copy edited partner @partners",
      "fullTitle": "Partners: copy edited partner @partners",
      "timedOut": false,
      "duration": 2125,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "partnersPage.copyEditedPartner();\nI.waitForElement('[name=form]');",
      "err": {},
      "isRoot": false,
      "uuid": "ebe58f17-9c0a-4f30-884b-e78686ce7ecc",
      "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete created partner @partners",
      "fullTitle": "Partners: delete created partner @partners",
      "timedOut": false,
      "duration": 2509,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "partnersPage.deleteCreatedPartner();\nI.dontSee(editPartnerName);",
      "err": {},
      "isRoot": false,
      "uuid": "e4be046c-7beb-454e-aa64-8bc549ee083c",
      "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "create partner @partners",
      "fullTitle": "Partners: create partner @partners",
      "timedOut": false,
      "duration": 5175,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "partnersPage.createNewPartner(partnerName, partnerEmail, partnerCompany, partnerPhone, note, operationNumber, institutionIdentifier);\nI.waitForText(partnerName, 5);\nI.see(partnerName);",
      "err": {},
      "isRoot": false,
      "uuid": "c65537ef-4a48-47d8-b416-3f3256f9bc4d",
      "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "edit created partner @partners",
      "fullTitle": "Partners: edit created partner @partners",
      "timedOut": false,
      "duration": 3833,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "partnersPage.editCreatedPartner(editPartnerName, editPartnerEmail, editPartnerPhone);\nI.waitForText(editPartnerName, 5);\nI.see(editPartnerName);\nI.see(editPartnerEmail);\nI.see(editPartnerPhone);",
      "err": {},
      "isRoot": false,
      "uuid": "5676318b-7920-4d5f-a772-6f11f4b41875",
      "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "copy edited partner @partners",
      "fullTitle": "Partners: copy edited partner @partners",
      "timedOut": false,
      "duration": 2125,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "partnersPage.copyEditedPartner();\nI.waitForElement('[name=form]');",
      "err": {},
      "isRoot": false,
      "uuid": "ebe58f17-9c0a-4f30-884b-e78686ce7ecc",
      "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "delete created partner @partners",
      "fullTitle": "Partners: delete created partner @partners",
      "timedOut": false,
      "duration": 2509,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "partnersPage.deleteCreatedPartner();\nI.dontSee(editPartnerName);",
      "err": {},
      "isRoot": false,
      "uuid": "e4be046c-7beb-454e-aa64-8bc549ee083c",
      "parentUUID": "2e258400-c1bc-48e6-9299-9add18e46cc5",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}